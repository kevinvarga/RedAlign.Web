// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RedAlign.Portal.Service;

namespace RedAlign.Portal.Service.Migrations
{
    [DbContext(typeof(PortalContext))]
    partial class PortalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("RedAlign.Portal.Service.AlignmentResult", b =>
                {
                    b.Property<int>("AlignmentResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlignmentSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeasurementId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("AlignmentResultId");

                    b.HasIndex("AlignmentSystemId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("AlignmentResults");
                });

            modelBuilder.Entity("RedAlign.Portal.Service.AlignmentSystem", b =>
                {
                    b.Property<int>("AlignmentSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Make")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("AlignmentSystemId");

                    b.HasIndex("CompanyId");

                    b.ToTable("AlignmentSystems");
                });

            modelBuilder.Entity("RedAlign.Portal.Service.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("RedAlign.Portal.Service.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EquipmentType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FacilityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Motor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("EquipmentId");

                    b.HasIndex("FacilityId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("RedAlign.Portal.Service.Facility", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("FacilityId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("RedAlign.Portal.Service.AlignmentResult", b =>
                {
                    b.HasOne("RedAlign.Portal.Service.AlignmentSystem", "AlignmentSystem")
                        .WithMany("AlignmentResults")
                        .HasForeignKey("AlignmentSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedAlign.Portal.Service.Equipment", "Equipment")
                        .WithMany("AlignmentResults")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlignmentSystem");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("RedAlign.Portal.Service.AlignmentSystem", b =>
                {
                    b.HasOne("RedAlign.Portal.Service.Company", "Company")
                        .WithMany("AlignmentSystems")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RedAlign.Portal.Service.Equipment", b =>
                {
                    b.HasOne("RedAlign.Portal.Service.Facility", "Facility")
                        .WithMany("Equipment")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("RedAlign.Portal.Service.Facility", b =>
                {
                    b.HasOne("RedAlign.Portal.Service.Company", "Company")
                        .WithMany("Facilities")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RedAlign.Portal.Service.AlignmentSystem", b =>
                {
                    b.Navigation("AlignmentResults");
                });

            modelBuilder.Entity("RedAlign.Portal.Service.Company", b =>
                {
                    b.Navigation("AlignmentSystems");

                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("RedAlign.Portal.Service.Equipment", b =>
                {
                    b.Navigation("AlignmentResults");
                });

            modelBuilder.Entity("RedAlign.Portal.Service.Facility", b =>
                {
                    b.Navigation("Equipment");
                });
#pragma warning restore 612, 618
        }
    }
}
